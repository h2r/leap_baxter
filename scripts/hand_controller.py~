#!/usr/bin/env python

import argparse
import sys

import rospy
import baxter_interface

from geometry_msgs.msg import (
    PoseStamped,
    Pose,
    Point,
    Quaternion
)
from std_msgs.msg import Header

from baxter_core_msgs.srv import (
    SolvePositionIK,
    SolvePositionIKRequest
)

from leap_client.msg import HandInfoList

is_init = False

def ik_solve(limb, pos, orient):
    #~ rospy.init_node("rsdk_ik_service_client")
    ns = "ExternalTools/" + limb + "/PositionKinematicsNode/IKService"
    iksvc = rospy.ServiceProxy(ns, SolvePositionIK)
    ikreq = SolvePositionIKRequest()
    print "iksvc: ", iksvc
    print "ikreq: ", ikreq
    hdr = Header(stamp=rospy.Time.now(), frame_id='base')
    poses = {
        str(limb): PoseStamped(header=hdr,
            pose=Pose(position=pos, orientation=orient))}
            
    ikreq.pose_stamp.append(poses[limb])
    try:
        rospy.wait_for_service(ns, 5.0)
        resp = iksvc(ikreq)
    except (rospy.ServiceException, rospy.ROSException), e:
        rospy.logerr("Service call failed: %s" % (e,))
        return 1
    if (resp.isValid[0]):
        print("SUCCESS - Valid Joint Solution Found:")
        # Format solution into Limb API-compatible dictionary
        limb_joints = dict(zip(resp.joints[0].name, resp.joints[0].position))
        print limb_joints
        return limb_joints
    else:
        print("INVALID POSE - No Valid Joint Solution Found.")

    return -1

def hand_control(data):
	if not is_init:
		#do init stuff
		rospy.loginfo("the (x,y,z) velocity is %f, %f, %f" % (data.hands[0].velocity.x, data.hands[0].velocity.y, data.hands[0].velocity.z))
		
	else: 
		pass

def hand_listener():
	#rospy.init_node("hand_listener")
	rospy.Subscriber("/leap/hand_info", HandInfoList, hand_control)
	rospy.spin()

def main():

	rospy.init_node('leap_baxter_interface')

	right_limb = baxter_interface.Limb('right')
	neutral_angles = {}
	neutral_angles['right_s0']=0.0
	neutral_angles['right_s1']=0.0
	neutral_angles['right_e0']=0.0
	neutral_angles['right_e1']=0.0
	neutral_angles['right_w0']=0.0
	neutral_angles['right_w1']=0.0
	neutral_angles['right_w2']=0.0
	right_limb.move_to_joint_positions(neutral_angles)
	
	hand_listener()


	

if __name__ == "__main__":
    main()


	
